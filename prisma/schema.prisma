generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

enum State {
  PENDING
  IN_PROGRESS
  FINISHED
  CANCELED
}

enum RequestCacheStatus {
  CHECKING
  CACHE
  SERVER
}

enum Action {
  SKIP
  REJECT
  MANUAL
}

model User {
  id        Int      @id @default(autoincrement())
  firstName String   @default("")
  lastName  String   @default("")
  email     String   @unique
  password  String
  role      Role     @relation(fields: [roleId], references: [id])
  roleId    Int
  company   Company  @relation(fields: [companyId], references: [id])
  companyId Int      @default(1)
  clients   Client[]

  notifications Notifications[]

  @@index([roleId])
  @@index([companyId])
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model Company {
  id                      Int                      @id @default(autoincrement())
  name                    String                   @unique
  users                   User[]
  company_characteristics Company_characteristic[]
  company_indicators      Company_indicator[]
  Chart_company           Chart_company[]
}

model Company_characteristic {
  id               Int            @id @default(autoincrement())
  company          Company        @relation(fields: [companyId], references: [id])
  companyId        Int
  characteristic   Characteristic @relation(fields: [characteristicId], references: [id])
  characteristicId Int

  @@index([characteristicId])
  @@index([companyId])
}

model Company_indicator {
  id          Int       @id @default(autoincrement())
  order       Int      @default(1)
  company     Company   @relation(fields: [companyId], references: [id])
  companyId   Int
  indicator   Indicator @relation(fields: [indicatorId], references: [id])
  indicatorId Int

  @@index([companyId])
  @@index([indicatorId])
}

model Client {
  id          Int       @id @default(autoincrement())
  firstName   String?   @default("")
  lastName    String?   @default("")
  cellPhone   String
  email       String
  owner       User      @relation(fields: [ownerId], references: [id])
  ownerId     Int
  processes   Process[]
  rfc         String
  uuid        String    @unique
  credentials_status String @default("pending")
  satwsid     String?   @unique
  companyName String?   @default("")
  address     String?   @default("")
  city        String?   @default("")
  state       String?   @default("")
  zipCode     String?   @default("")
  exteriorNumber String? @default("")
  interiorNumber String? @default("")
  neighborhood String?   @default("")
  municipality String?   @default("")
  nationality  String?   @default("")
  country      String?   @default("")
  extractions Extraction[]
  cacheExpirationSatWsId DateTime? @default(now())
  cacheExpirationMoffin DateTime? @default(now())
  @@index([ownerId])
}

model Source {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  order      Int
  indicators Indicator[]
}

model Indicator {
  id                  Int                 @id @default(autoincrement())
  name                String              @unique
  order               Int
  source              Source              @relation(fields: [sourceId], references: [id])
  sourceId            Int
  associated_function String
  characteristics     Characteristic[]
  steps               Step[]
  company_indicators  Company_indicator[]

  @@index([sourceId])
}

model Characteristic {
  id                      Int                      @id @default(autoincrement())
  name                    String                   @unique
  order                   Int
  value                   String
  action                  Action
  score                   Int
  indicators              Indicator[]
  company_characteristics Company_characteristic[]
}

model Process {
  id          Int     @id @default(autoincrement())
  name        String  @default(uuid())
  description String
  order       Int     @default(1)
  state       State   @default(PENDING)
  client      Client  @relation(fields: [clientId], references: [id])
  clientId    Int
  steps       Step[]
  deleted     Boolean @default(false)

  @@index([clientId])
}

model Step {
  id                Int       @id @default(autoincrement())
  name              String
  description       String
  order             Int
  state             State     @default(PENDING)
  process           Process   @relation(fields: [processId], references: [id])
  processId         Int
  indicatorId       Int
  indicator         Indicator @relation(fields: [indicatorId], references: [id])
  result            Action?
  score             Int?
  uuid              String    @unique
  resultExplanation String?

  @@index([processId])
  @@index([indicatorId])
}

model Chart {
  id              Int             @id @default(autoincrement())
  name            String          @unique
  description     String
  order           Int
  chart_companies Chart_company[]
  chart_users     Chart_user[]
}

model Chart_company {
  id        Int     @id @default(autoincrement())
  chart     Chart   @relation(fields: [chartId], references: [id])
  chartId   Int
  company   Company @relation(fields: [companyId], references: [id])
  companyId Int

  @@index([chartId])
  @@index([companyId])
}

model Chart_user {
  id      Int   @id @default(autoincrement())
  chart   Chart @relation(fields: [chartId], references: [id])
  chartId Int

  @@index([chartId])
}

model Extraction {
  id Int @id @default(autoincrement())
  uuid String?
  localId String? @unique @default("")
  taxPayerId String 
  taxPayerName String? @default("") 
  taxPayerPersonType String? @default("") 
  taxPayerRegistrationDate DateTime?
  extractor String
  optionsTypes String? @default("") 
  optionsPeriodFrom DateTime?
  optionsPeriodTo DateTime?
  optionsJson String? @db.Text 
  status String? @default("") 
  startedAt DateTime?
  finishedAt DateTime?
  rateLimitedAt DateTime?
  errorCode String? @default("") 
  createdDataPoints Int?
  updatedDataPoints Int?
  createdAt DateTime?
  updatedAt DateTime?
  client      Client  @relation(fields: [clientId], references: [id])
  clientId    Int

  @@index([clientId])
}

model Invoice {
  id Int @id @default(autoincrement())
  uuid String @default("") @unique
  version String
  type String
  usage String
  paymentType String
  paymentMethod Int
  placeOfIssue BigInt
  currency String
  exchangeRate Float
  status String
  pac String
  issuedAt DateTime
  certifiedAt DateTime
  cancellationStatus String
  cancellationProcessStatus String
  canceledAt DateTime
  xml Int
  pdf Int
  discount Int
  tax String
  subtotal Float
  total Float
  paidAmount Float
  dueAmount String
  fullyPaidAt String
  lastPaymentDate DateTime
  issuerRfc String
  issuerName String
  receiverRfc String
  receiverName String
  isIssuer Int
  isReceiver Int
  internalIdentifier BigInt
  reference String
  creditedAmount String
  subtotalCreditedAmount String
  appliedTaxes String
  totalTransferredTaxes String
  transferredLocalTaxes String
  transferredValueAddedTax String
  transferredSinTax String
  totalRetainedTaxes String
  retainedLocalTaxes String
  retainedValueAddedTax String
  retainedIncomeTax String
  retainedSinTax String
}

model QueryCache {
  id Int @id @default(autoincrement())
  url String @unique
  method String 
  headers String @db.Text
  content String @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  requestLog RequestLog @relation(fields: [requestLogId], references: [id])
  requestLogId Int @unique
  uuid String? @unique @default(uuid())
  @@index([requestLogId])
}

model RequestLog {
  id Int @id @default(autoincrement())
  uuid String? @unique @default(uuid())
  url String
  method String
  headers String @db.Text
  body String @db.Text
  stausCode Int? @default(0)
  servedFromCache RequestCacheStatus? @default(CHECKING)
  servedFromCacheUuid String? @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  queryCache QueryCache?

}

model Notifications {
  id Int @id @default(autoincrement())
  type String
  title String
  body String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  userId Int
  user User @relation(fields: [userId], references: [id])
}



